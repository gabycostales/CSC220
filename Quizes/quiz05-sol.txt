0. List<E> has implementations ArrayList<E> and LinkedList<E> which implement
   the list as either a (partially filled) array or a (doubly) linked list.
   What is the O() running time of get(index) for a linked list?

It's O(1) for an array, but for a linked list, to get element 10 costs
10 steps because you have to start at the head and move forward.  (You
could start at the tail, but that wouldn't help for elelements near
the middle.)

So the answer is O(n).



1. Suppose SortedPD used LinkedList<DirectoryEntry> to store the entries but
   SortedPD.find still uses binary search.  (Start at the middle, etc.  Of
   course, it would use get(c) instead of array[c].)  What would be the O()
   running time of find?

How many times do you have to call get?  Particularly, get(middle)?  (Instead of array[middle].)

So log2(n) times, right?

So the answer should be O(log(n) times your answer to #0)



2. When a program is iterating over a ListQueue, which uses a linked list, what
   is the O() running time of iterator.next()?

It is just setting node = node.next.
That's O(1).



3. If you are planning to use poll (which does *not* throw an exception for an
   empty queue), why is it a bad idea to call offer with null:  queue.offer(null)?

Because poll returns null if the queue is empty, so you you dequeue
this null, you will think the queue is empty.



4. The methods of AbstractQueue<E> work by calling the methods that YOU WROTE
   yesterday.  How can AbstractQueue<E> implement remove() by calling poll()
   and size() which you implemented?  Remember, remove() should throw
   NoSuchElementException if there is no element to remove.

	E remove () {
		if (size() == 0)
			throw new NoSuchElementException();
                return poll();
        }



5. ArrayQueue<E> uses a circular array theData and int variables front, rear,
   size, and capacity.  Implement poll.  Don't forget the empty case.

	E poll () {
		if (size == 0)
                      return null;
                E value = theData[front];
		front = (front + 1) % capacity; // capacity == theData.length
		size--;
		return value;
	}



6. Suppose ArrayQueue<String> has an array theData of length 5 with the
   following data:

	"Mary", "had", "a", "little", "lamb"

   Suppose front==1 and rear==4.  (Zero based indexing!!!)

   What does poll() return?  What is the new value of front?  What are the new
   contents of the array?  NOTE: just because an element of the array is not
   null does not mean it is in the queue!  front and rear determine which
   elements are in the queue.

"had"
front=2
same

or if your code sets theData[front] to null, then

	"Mary", null, "a", "little", "lamb"


7. After executing the poll() in #6, offer("fleece") and then offer("white").
   What is the value of rear?  What are the contents of the array?

rear=1

	"fleece", "white", "a", "little", "lamb"




8. Now offer("snow").  What does the array look like and what are the values of
   front and rear?

	"a", "little", "lamb", "fleece", "white", "snow", null, null, null, null

	front=0
	rear=5



9. ListQueue<E> uses a linked list, with Node variables front and rear, and int
   variable size.  Implement offer.

	class Node {
		E data;
		Node next;
		Node (E data) { this.data = data; this.next = null; }
	}

        Node front, rear;
        int size;

	boolean offer (E obj) {
		if (rear == null) {
			front = rear = new Node(obj);
                }
		else {
			Node node = new Node(obj);
			rear.next = node;
			rear = node;

			rear.next = new Node(obj);
			rear = rear.next;
		}

		size++;
		return true;
	}


